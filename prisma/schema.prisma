// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



enum PHASES {
  STARTUP
  PLANNING
  EXECUTING
  CONTROLLING
  CLOSING
}

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String?   @unique
  photo     String?   @default("https://cdn.myportfolio.com/17be4dd08c5417027a544816a909fcf8/01b4cc12-6d30-46e1-b8d0-ab3ca15d0fad_rw_1200.png?h=078dbf9c704d63a54cb6942823239e32")
  password  String?
  status    String?
  lastName  String?
  phone     String?
  zipCode   String?
  location  String?
  type      String?
  passwordForAdmin String?
  createdAt DateTime  @default(now())
  Project   Project[]
  

  @@index([id])
}

model MileStones {
  id           String   @id @default(cuid())
  projectId String    
  name      String?     
  description String?  
  dueDate     DateTime?
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@index([id])
  @@index([projectId])
}

model ProjectObjectives {
  id           String   @id @default(cuid())
  projectId String    
  THE_PROJECTS_OBJECTIVES      String?     
  SUCCESS_CRITERIA String?  
  APPROVAL     String?     
  Type          String?     
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@index([id])
  @@index([projectId])
}

model Project {
  id            String          @id @default(uuid())
  title         String?
  startAt       DateTime?
  endsAt        DateTime?
  currentPhase  String?  
  userId        String
  WorkBreakDownStorage Json?
  Budget        Float?
  user          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  StakHolder    StakeHolder[]
  Risk          Risk[]
  Resource      Resources[]
  Comunications Comunications[]
  MileStones    MileStones[]
  Startup       Startup[]
  Planning      Planning[]
  Executing     Executing[]
  Controlling   Controlling[]
  Closing       Closing[]
  Tasks        Tasks[]
  ProjectObjectives ProjectObjectives[]
  Document      Document[]
  ProjectCloseOut  ProjectCloseOut[]
  ChangeLog     ChangeLog[]

  @@index([id])
  @@index([userId])
}

model Tasks {
    id        String  @id @default(uuid())
    projectId String?
    title     String?
    description String?
    Priority    String?
    Color       String?
    StartAt    DateTime?
    EndsAt     DateTime?
    EndedAt    DateTime?
    cost       Float?
    RealCost   Float?
    imgUrl     String?
    progress   Int?
    Shape       String?
    Status      String?
    AssignedTo  Json?
    AlocatedRessources Json?
    project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@index([id])
    @@index([projectId])
}



model Document {
   id        String  @id @default(uuid())
   name      String? 
   url       String?
   path      String?
   createdAt DateTime  @default(now())
   status    String?
   projectId  String?
   project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
    @@index([id])
    @@index([projectId])
}

model StakeHolder {
  id        String  @id @default(uuid())
  projectId String?
  name      String? 
  type      String 
  position  String? 
  impact    String? 
  role      String?    
  Requirements String?  
  contact     String?  
  InvestmentAmount String?   
  Expectations    String?   
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model Risk {
  id        String  @id @default(uuid())
  projectId String?
  name      String? 
  cost      String?
  
  description String?  
  levelOfDanger String? 
  solutions  String?    
    project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@index([id])
  @@index([projectId])
}

model Resources {
  id        String  @id @default(uuid())
  projectId String?
  name      String? 
  description String?  
  cost   Float? 
  quality String?
  imageUrl String? 
  project Project?  @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
}

model Comunications {
  id             String  @id @default(uuid())
  projectId      String?
  stakeholder    Json?
  description    String? 
  time           DateTime?
  method         String?
  Sender         String?

  project Project?  @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
}

model Startup {
  id        String  @id @default(uuid())
  projectId String?
  Title      String? 
  ProjectObjectiveAndOpportunity String? 
  ProjectDescription String? 
  HighLevelRequirements String? 
  HighLevelRisks String? 
  
  project Project?  @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
}

model Planning {
  id        String  @id @default(uuid())
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  scope Scope[]
  ManagementPlan ManagementPlan[]
  scheduelManagementPlan scheduelManagementPlan[]
  costlManagementPlan costlManagementPlan[]
  ChangelManagementPlan ChangelManagementPlan[]
  RisklManagementPlan RisklManagementPlan[]
  ProjectLifeCycle    ProjectLifeCycle[]
  @@index([id])
  @@index([projectId])
}

model Executing  {
  id        String  @id @default(uuid())
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  
  @@index([id])
  @@index([projectId])
}

model Controlling  {
  id        String  @id @default(uuid())
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  ContractorStatusReport ContractorStatusReport[]
  IssueLog  IssueLog[]
  ProjectPeformaceReport ProjectPeformaceReport[]

  @@index([id])
  @@index([projectId])
}

model Closing  {
  id        String  @id @default(uuid())
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  
  formalAcceptance formalAcceptance[]


  @@index([id])
  @@index([projectId])
}

model scheduelManagementPlan {
  id        String  @id @default(uuid())
  PlanningId String?
  ScheduleMethodology      String? 
  ScheduleTools String? 
  LevelOfAccuracy String? 
  UnitsOfMeasure String? 
  VarianceThresholds String? 
 ScheduleReportingAndFormat String? 
 ProcessManagementActivitySequencing String? 
  ProcessManagementEstimatingResources String? 
  ProcessManagementEstimatingEffortAndDuration String? 
  ProcessManagementUpdatingMonitoringAndControlling String? 
 ProcessManagementActivityidentification String? 
  planning Planning?  @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}
model costlManagementPlan {
  id        String  @id @default(uuid())
  PlanningId String?
  LevelOfAccuracy      String? 
  UnitsOfMeasure String? 
  ControlThresholds String? 
  RulesForPerformanceMeasurement String? 
  CostReportingAndFormat String? 
 EstimatingCosts String? 
 DevelopingTheBudget String? 
  UpdatingMonitoringAndControlling String? 
 
  planning Planning?  @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}
model ChangelManagementPlan {
  id        String  @id @default(uuid())
  PlanningId String?
  ChangeManagementApproach      String? 
  ScheduleChange String? 
  BudgetChange String? 
  ScopeChange String? 
  ProjectDocumentChanges String? 
 ChangeRequestSubmittal String? 
 ChangeRequestTracking String? 
  ChangeRequestReview String? 
   ChangeRequestDisposition String? 
  planning Planning? @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}
model RisklManagementPlan {
  id        String  @id @default(uuid())
  PlanningId String?
  Methodology      String? 
  RolesAndResponsibilities String? 
  RiskCategories String? 
  RiskManagementFunding String? 
  ContingencyProtocols String? 
 FrequencyAndTiming String? 
 StakeholderRiskTolerances String? 
  TrackingAndAudit String? 
  planning Planning?  @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}

model Scope {
  id        String  @id @default(uuid())
  PlanningId String?
  ScopeStatementDevelopment      String? 
  WBSStructure String? 
  WBSDictionary String? 
  ScopeBaselineMaintenance String? 
  ScopeChange String? 
 DeliverableAcceptance String? 
 ScopeandRequirementsIntegration String? 
  planning Planning?  @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}

model ManagementPlan {
  id        String  @id @default(uuid())
  PlanningId String?
  IntegrationProcesses      String? 
  IntegrationTailoringDecisions String? 
  ScopeProcesses String? 
  ScopeTailoringDecisions String? 
  TimeProcesses String? 
 TimeTailoringDecisions String? 
 CostProcesses String? 
 CostTailoringDecisions String? 
  QualityProcesses      String? 
  QualityTailoringDecisions String? 
  HumanResourcesProcesses String? 
  HumanResourcesTailoringDecisions String? 
  CommunicationProcesses String? 
 CommunicationTailoringDecisions String? 
 RiskProcesses String? 
 RiskTailoringDecisions String? 
   ProcurementProcesses String? 
  ProcurementTailoringDecisions String? 
 StakeholdersProcesses String? 
 StakeholdersTailoringDecisions String? 
 IntegrationToolsandTechniques String? 
    ScopeToolsAndTechniques String? 
  TimeToolsAndTechniques String? 
 CostToolsandTechniques String? 
 QualityToolsAndTechniques String? 
 HumanResourcesToolsAndTechniques String? 
    CommunicationToolsAndTechniques String? 
  RiskToolsAndTechniques String? 
 ProcurementToolsAndTechniques String? 
 StakeholdersToolsAndTechniques String? 
 ProjectReviews String? 

  planning Planning? @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}

model ProjectCloseOut {
  id        String  @id @default(uuid())
  ObjectDuProjet      String? 
  CritereDeRealisationDeLaPorteeDuProjet String? 
  ObjectifsDeLaPorteeOntEteAttents String? 
  ObjectifsDeQualiteDuProjet String? 
  CriteresDeRealisationDeLaQualite String? 
  CommentLaQualiteAEteAtteinte String? 
  ObjectifsDeTempsDuProjet String? 
  CriteresDeRealisationDesDelais String? 
  CommentLesObjectifsDeDelaisOntEteAtteints      String? 
  ObjectifsDeCoutDuProjet String? 
  CriteresDeRealisationDesCouts String? 
  CommentLesObjectifsDeCoutsOntEteAtteints String? 
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  @@index([id])
  @@index([projectId])
}

model ChangeLog {
  id        String  @id @default(uuid())
  ActivitesPrevuesPourCettePeriodeDeRapport      String? 
  ActivitesRealiseesAuCoursDeCettePeriodeDeRapport String? 
  ActivitesPrevuesMaisNonRealiseesAuCoursDeCettePeriodeDeRapport String? 
  LaCauseProfondeDesEcarts String? 
  FondsDepensesAuCoursDeCettePeriodeDeRapport String? 
  FondsPrevusADepenserAuCoursDeCettePeriodeDeRapport String? 
  CauseFondamentaleDesEcarts String? 
  EcartsDeQualiteIdentifiesPendantCettePeriode String? 
  ActionCorrectiveOuPreventivePlanifiee      String? 
  ActivitesPrevuesPourLaProchainePeriodeDeRapport String? 
  CoutsPrevusPourLaProchainePeriodeDeRapport String? 
  RisquesNouvellementIdentifies String? 
  ProblrmesIdentifies String? 
  Commentaires String? 
  projectId String?
  project Project?  @relation(fields: [projectId], references: [id])
  @@index([id])
  @@index([projectId])
}

  

model  formalAcceptance {
    id        String  @id @default(uuid())
    ClosingId String? 
    REQUIREMENT String?
    ACCEPTANCE_CRITERIA  String?
    VALIDATION_METHOD   String?
    STATUS         String?
    COMMENTS       String?
    SIGNOFF        String?
    closing Closing?  @relation(fields: [ClosingId], references: [id])
    @@index([id])
    @@index([ClosingId])
}

model ProjectLifeCycle {
  id        String  @id @default(uuid())
  PlanningId String?
  Phase      String? 
  KeyDeliverables String? 
  
  planning Planning?  @relation(fields: [PlanningId], references: [id])

  @@index([id])
  @@index([PlanningId])
}

model ContractorStatusReport {
    id        String  @id @default(uuid())
    ControllingId String?
    controlling Controlling?  @relation(fields: [ControllingId], references: [id])
    ScopePerformanceThisReportingPeriod String? 
    QualityPerformanceThisReportingPeriod  String? 
    SchedulePerformanceThisReportingPeriod String? 
    PlannedCorrectiveOrPreventiveAction  String? 
    CostPerformanceThisReportingPeriod String? 
    ForecastPerformanceForFutureReportingPeriods String? 
    ClaimsOrDisputes String? 
    Risks String? 
    Issues String? 
    Comments String? 
    @@index([id])
    @@index([ControllingId])
}

model IssueLog {
   id            String  @id @default(uuid())
   ControllingId String?
   controlling Controlling?  @relation(fields: [ControllingId], references: [id])

   FirstTable  Json?
   SecondTable  Json?

   @@index([id])
   @@index([ControllingId])
}

model ProjectPeformaceReport {
   id            String  @id @default(uuid())
   ControllingId String?
   controlling Controlling?  @relation(fields: [ControllingId], references: [id])

   AccomplishmentsForThisReportingPeriod String?  
   AccomplishmentsPlannedButNotCompletedThisReportingPeriod String?  
   RootCauseOfVariances String?  
   ImpactToUpcomingMilestonesOrProjectDueDate String?  
   PlannedCorrectiveOrPreventiveAction String?  
   FundsSpentThisReportingPeriod String?  
   AccomplishmentsPlannedForNextReportingPeriod String?  
   ImpactToOverallBudgetOrContingencyFunds String?  
   CostsPlannedForNextReportingPeriod String?  
   Risk String?  
   Issues String?  
   Comments String?  

   @@index([id])
   @@index([ControllingId])
}