import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Select from "react-select";
import { Header } from "~/components/header/Header";
import { ControllingSidebar } from "~/components/sideBars/ControllingSidebar";
import { RowGridText } from "~/components/typography/RowGridText";
import { AbdullahTable } from "~/components/used/AbdullahTable";
import { Form } from "~/components/used/Form";
import { FormContainer } from "~/components/used/FormContainer";
import { FormHead } from "~/components/used/FormHead";
import { Input } from "~/components/used/Input";
import { TextField } from "~/components/used/TextField";
import { STAKHOLDER_TYPES } from "~/types/static/STATICDATA";


const Page: NextPage = () => {
  const [isOpen , setIsOpen] = useState<boolean>(true)
  return (
    <>
      <Head>
      <title>ProjectFlow</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
      </Head>
      <Header />
      <main className=" custopn-page-height  flex w-full bg-gray-50 ">
       <ControllingSidebar isOpen={isOpen} setIsOpen={setIsOpen} />
       <FormContainer className ={` ${isOpen ? "ml-[20rem]" : "ml-[5rem]"}`}>
 
      <Form  >
      <div className="bg-white px-4 py-5 sm:p-6">
      <div className="grid grid-cols-6 lg:grid-cols-12 gap-6">
          <RowGridText text="RISK AUDIT" />
          <RowGridText text="La clôture de projet est la phase finale où toutes les activités, les livrables et les objectifs sont terminés, et le projet est officiellement clôturé, visant à valider le succès du projet et faciliter la transition vers les opérations en cours ou les projets ultérieurs" small />


          <RowGridText text="Risk Event Audit" />
          <div className="col-span-6 lg:col-span-12">
              <AbdullahTable
               isLoading={false}
               title="Deficiencies or Defects"
               Action ={false}
               headers={["Event" , "Cause" , "Response" , "Comment" ]}
               body={[]}
               // PlusButton={<PlusButtonIssueManagment  />}
               />
          </div>

          <RowGridText text="Risk Response Audit" />
          <div className="col-span-6 lg:col-span-12">
              <AbdullahTable
               isLoading={false}
               title="Deficiencies or Defects"
               Action ={false}
               headers={["Event" , "Response" , "Successful " , "Actions to Improve" ]}
               body={[]}
               // PlusButton={<PlusButtonIssueManagment  />}
               />
          </div>
          <RowGridText text="Risk Management Process Audit" />

          <RowGridText text="Plan Risk Management" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
           <RowGridText text="Identify Risks" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
            <RowGridText text="Perform Qualitative Assessment" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
             <RowGridText text="Perform Quantitative Assessment" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
             <RowGridText text="Plan Risk Responses" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
             <RowGridText text="Monitor and Control Risks" />
                <Input
                  isLoading={false}
                  lable="What Worked Well"
                  onChange={(e) => console.log(e)}
                  value={""}
                />
                <Input
                  isLoading={false}
                  lable="What Can Be Improved"
                  onChange={(e) => console.log(e)}
                  value={""}
               />
            

      <TextField
        lable="Description of Good Practices to Share"
        onChange={(e) => console.log(e)}
        isLoading={false}
        value={""}
      />
      <TextField
        lable="Description of Areas for Improvement"
        onChange={(e) => console.log(e)}
        isLoading={false}
        value={""}
      />

       
         <TextField
        lable="Comments"
        onChange={(e) => console.log(e)}
        isLoading={false}
        value={""}
      />
      
        </div>
      </div>
   
       </Form>
  </FormContainer>
      </main>
    </>
  );
};

export default Page;